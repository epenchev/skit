/*
 * NetConnection.h
 *
 * Copyright (C) 2013  Emil Penchev, Bulgaria
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 *
 *  Created on: Aug 21, 2013
 *      Author: emo
 */

#ifndef NETCONNECTION_H_
#define NETCONNECTION_H_

#include "system/TCPClientSocket.h"
#include <set>

/**
* Abstract base class for implementing event listeners(observers) for NetConnection objects.
*/
class ConnectionObserver
{
    /**
    * Triggered when connection changes state to connected.
    */
    virtual void OnConnect() = 0;

    /**
    * Triggered when connection becomes disconnected.
    */
    virtual void OnDisconnect() = 0;

    virtual void OnError() = 0;
};

typedef std::set<ConnectionObserver*> ConnObserverSet;


class NetConnection
{
public:

    /**
    * Return connection status.
    * @return bool - true if connected false otherwise.
    */
    virtual bool IsConnected() = 0;

    /**
    * Return unique connection ID. Each ID is allocated only from server.
    * @return unsigned - connection ID.
    */
    virtual unsigned GetSessionId() = 0;

    /**
    * Get total count written bytes to this connection.
    * @return unsigned long - total bytes.
    */
    virtual unsigned long GetWrittenBytes() = 0;

    /**
    * Get total count read bytes from this connection.
    * @return unsigned long - total bytes.
    */
    virtual unsigned long GetReadBytes() = 0;

    /**
    * Get the IP addresses the client is connected from.
    * @return string - IP address.
    */
    virtual std::string GetRemoteAddress() = 0;

    /**
    * Get the port the client is connected from.
    * @return unsigned - net port.
    */
    virtual unsigned GetRemotePort() = 0;
};


#if 0
/**
* Network connection from which a client will be created.
* Interface between media clients and server.
*/
class NetConnection
{
public:
    /**
    * Each connection is assigned a unique ID from a server.
    * This helps to keep track on connections.
    */
    NetConnection(unsigned long connId);

    virtual ~NetConnection();

    /**
    * Add event listener(observer) for the connection.
    * Listener will be notified about the events implemented in ConnectionObserver interface.
    * @param listener - event listener(observer).
    */
    void AddListener(ConnectionObserver* listener);

    /**
    * Remove event listener(observer) for the connection.
    * @param listener - event listener(observer).
    */
    void RemoveListener(ConnectionObserver* listener);

    /**
    * Return connection status.
    * @return bool - true if connected false otherwise.
    */
    bool IsConnected();

    /**
    * Return unique connection ID. Each ID is allocated only from server.
    * @return unsigned - connection ID.
    */
    unsigned GetSessionId();

    /**
    * Get total count written bytes to this connection.
    * @return unsigned long - total bytes.
    */
    unsigned long GetWrittenBytes();

    /**
    * Get total count read bytes from this connection.
    * @return unsigned long - total bytes.
    */
    unsigned long GetReadBytes();

    /**
    * Get the IP addresses the client is connected from.
    * @return string - IP address.
    */
    std::string GetRemoteAddress();

    /**
    * Get the port the client is connected from.
    * @return unsigned - net port.
    */
    unsigned GetRemotePort();

    void WriteBytes();

    void ReadBytes();

    ErrorCode& GetLastError() { return mErrCode; }
protected:
    bool mState;                  /**< connection state true(connected), false(disconnected)  */
    unsigned long mRdBytes;       /**< count read bytes from connection  */
    unsigned long mWrBytes;       /**< count write bytes to connection  */
    unsigned long mConnId;        /**< unique connection ID  */
    ErrorCode  mErrCode;          /**< error code of last socket operation */
    TCPClientSocket* mSocket;     /**< socket bound with this connection */
    ConnObserverSet mObservers;   /**< event listeners(observers) for this connection */
};
#endif

#endif /* NETCONNECTION_H_ */
